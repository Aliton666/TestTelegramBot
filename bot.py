from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.utils import executor
from aiogram.types import *

from core.button import registration_markup, services_markup
from core.inline import procedure_inline, specialist_inline, time_menu, date_inline, time_inline
from database.dbusers import registration_users, check_users, get_procedures, get_specialists, create_appointment
from core.config import *
from database.dbusers import create_tables

create_tables()


import os
os.system("clear")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
appointments = {}

@dp.message_handler(commands=["start"])
async def start(message: Message):
    user_id = message.chat.id
    check = check_users(user_id)
    
    if check is None:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=registration_markup)
    else:
        await message.reply("–í—ã —É–∂–µ —É –Ω–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ üòá", reply_markup=services_markup)

@dp.message_handler(content_types=ContentTypes.CONTACT)
async def add_contact(message: Message):
    user_id = message.contact.user_id
    username = message.chat.username
    first_name = message.contact.first_name
    last_name = message.contact.last_name
    phone = message.contact.phone_number
    registration_users(user_id, username, first_name, last_name, phone)

    appointments[user_id] = appointments.get(user_id, {})
    appointments[user_id]["phone"] = phone

    information = f"–ê–π–¥–∏: {user_id}\n–ü–æ–ª(–∫–æ–µ) –ò–º—è: @{username}\n–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\n–ù–æ–º–µ—Ä: {phone}\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {datetime.now().strftime('%Y-%m-%d')}"
    await bot.send_message(chat_id=ADMIN_USERID, text=information)
    await message.reply(text="–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ üòá", reply_markup=services_markup)

@dp.message_handler(content_types=ContentTypes.TEXT)
async def message_text_user(message: Message):
    user_id = message.chat.id
    check = check_users(user_id)
    if check is None:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é")
    else:
        if message.text.lower() == "—É—Å–ª—É–≥–∏":
            await message.answer("–í—ã –≤ –£—Å–ª—É–≥–∏", reply_markup=procedure_inline)
            await message.delete()

@dp.callback_query_handler(lambda c: c.data.startswith("procedure_"))
async def procedure_handler(callback_query: CallbackQuery):
    procedure_id = int(callback_query.data[len("procedure_"):])  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    appointments[user_id] = appointments.get(user_id, {})
    appointments[user_id]["procedure_id"] = procedure_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    msg = await bot.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É {procedure_id}:", 
        chat_id=user_id, 
        message_id=callback_query.message.message_id, 
        reply_markup=specialist_inline
    )
    appointments[user_id]["msg_id_procedure"] = msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è



@dp.callback_query_handler(lambda c: c.data.startswith("specialist_"))
async def date_handler(callback_query: CallbackQuery):
    specialist_id = int(callback_query.data[len("specialist_"):])
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    appointments[user_id] = appointments.get(user_id, {})
    appointments[user_id]["specialist_id"] = specialist_id

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—è –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    msg = await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        chat_id=callback_query.from_user.id,
        message_id=appointments[callback_query.from_user.id]["msg_id_procedure"],
        reply_markup=date_inline
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    appointments[callback_query.from_user.id]["msg_id_date"] = msg.message_id


@dp.callback_query_handler(lambda c: c.data.startswith("date_"))
async def time_handler(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ callback_data
    selected_date = callback_query.data[len("date_"):]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ appointments
    appointments[callback_query.from_user.id]["date"] = selected_date

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_buttons = time_menu  # –£–∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—è –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    msg = await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", 
        chat_id=callback_query.from_user.id, 
        message_id=appointments[callback_query.from_user.id]["msg_id_date"], 
        reply_markup=time_buttons
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    appointments[callback_query.from_user.id]["msg_id_date"] = msg.message_id

@dp.callback_query_handler(lambda c: c.data in ["10:00", "12:00", "14:00", "16:00"])
async def time_callback_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    appointments[user_id]["time"] = callback_query.data
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {callback_query.data}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    appointment_details = appointments.get(user_id)
    if not appointment_details:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏.")
        return

    await callback_query.message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
                                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {appointments[user_id]['phone']}\n"
                                        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {appointments[user_id]['procedure']}\n"
                                        f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {appointments[user_id]['specialist']}\n"
                                        f"–î–∞—Ç–∞: {appointments[user_id]['date']}\n"
                                        f"–í—Ä–µ–º—è: {appointments[user_id]['time']}\n\n"
                                        "–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    create_appointment(
        user_id, 
        appointments[user_id]["procedure_id"], 
        appointments[user_id]["specialist_id"], 
        appointments[user_id]["date"], 
        appointments[user_id]["time"]
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É
    admin_message = (f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n\n"
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {appointments[user_id]['phone']}\n"
                     f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {appointments[user_id]['procedure']}\n"
                     f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {appointments[user_id]['specialist']}\n"
                     f"–î–∞—Ç–∞: {appointments[user_id]['date']}\n"
                     f"–í—Ä–µ–º—è: {appointments[user_id]['time']}")
    await bot.send_message(ADMIN_USERID, admin_message)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
